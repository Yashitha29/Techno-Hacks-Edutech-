import java.util.LinkedList;
import java.util.Random;
import java.util.Scanner;

public class SnakeGame {
    public static final int BOARD_SIZE = 10;
    public static final char EMPTY_CELL = '.';
    public static final char SNAKE_BODY = 'o';
    public static final char SNAKE_HEAD = 'O';
    public static final char FOOD = '*';

    private LinkedList<Point> snake;
    private Point food;
    private char[][] board;
    private Direction direction;
    private boolean isGameOver;

    public SnakeGame() {
        snake = new LinkedList<>();
        snake.add(new Point(BOARD_SIZE / 2, BOARD_SIZE / 2));
        food = generateFood();
        board = new char[BOARD_SIZE][BOARD_SIZE];
        direction = Direction.RIGHT;
        isGameOver = false;
    }

    public void run() {
        Scanner scanner = new Scanner(System.in);

        while (!isGameOver) {
            updateBoard();
            printBoard();

            System.out.print("Enter direction (W/A/S/D): ");
            char input = scanner.next().toUpperCase().charAt(0);
            if (input == 'W') direction = Direction.UP;
            else if (input == 'A') direction = Direction.LEFT;
            else if (input == 'S') direction = Direction.DOWN;
            else if (input == 'D') direction = Direction.RIGHT;

            moveSnake();
            checkCollision();
            checkFood();

            clearScreen();
        }

        scanner.close();
    }

    private void updateBoard() {
        for (int i = 0; i < BOARD_SIZE; i++) {
            for (int j = 0; j < BOARD_SIZE; j++) {
                board[i][j] = EMPTY_CELL;
            }
        }

        for (Point p : snake) {
            board[p.y][p.x] = (p == snake.getFirst()) ? SNAKE_HEAD : SNAKE_BODY;
        }

        board[food.y][food.x] = FOOD;
    }

    private void printBoard() {
        for (int i = 0; i < BOARD_SIZE; i++) {
            for (int j = 0; j < BOARD_SIZE; j++) {
                System.out.print(board[i][j] + " ");
            }
            System.out.println();
        }
    }

    private Point generateFood() {
        Random random = new Random();
        int x = random.nextInt(BOARD_SIZE);
        int y = random.nextInt(BOARD_SIZE);
        return new Point(x, y);
    }

    private void moveSnake() {
        Point head = snake.getFirst();
        Point newHead = new Point(head.x, head.y);

        switch (direction) {
            case UP:
                newHead.y--;
                break;
            case DOWN:
                newHead.y++;
                break;
            case LEFT:
                newHead.x--;
                break;
            case RIGHT:
                newHead.x++;
                break;
        }

        snake.addFirst(newHead);
        if (newHead.equals(food)) {
            food = generateFood();
        } else {
            snake.removeLast();
        }
    }

    private void checkCollision() {
        Point head = snake.getFirst();

        if (head.x < 0 || head.x >= BOARD_SIZE || head.y < 0 || head.y >= BOARD_SIZE) {
            isGameOver = true;
            System.out.println("Game Over! Out of bounds.");
        }

        for (int i = 1; i < snake.size(); i++) {
            if (head.equals(snake.get(i))) {
                isGameOver = true;
                System.out.println("Game Over! Self collision.");
                break;
            }
        }
    }

    private void checkFood() {
        Point head = snake.getFirst();

        if (head.equals(food)) {
            System.out.println("Snake ate the food!");
        }
    }

    private void clearScreen() {
        System.out.print("\033[H\033[2J");
        System.out.flush();
    }

    public static void main(String[] args) {
        SnakeGame game = new SnakeGame();
        game.run();
    }

    private enum Direction {
        UP, DOWN, LEFT, RIGHT
    }

    private static class Point {
        int x;
        int y;

        public Point(int x, int y) {
            this.x = x;
            this.y = y;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) return true;
            if (!(obj instanceof Point)) return false;
            Point other = (Point) obj;
            return this.x == other.x && this.y == other.y;
        }
    }
}
